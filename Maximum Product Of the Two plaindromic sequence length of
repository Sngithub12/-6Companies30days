class Solution {
    public int maxProduct(String s) {
        int n = s.length();
        int maxProduct = 0;

        // Generate all possible subsequences using bitmask
        int totalSubsequences = 1 << n; // 2^n
        for (int mask1 = 1; mask1 < totalSubsequences; mask1++) {
            String subseq1 = getSubsequence(s, mask1);
            if (isPalindrome(subseq1)) {
                for (int mask2 = 1; mask2 < totalSubsequences; mask2++) {
                    // Ensure mask1 and mask2 are disjoint
                    if ((mask1 & mask2) == 0) {
                        String subseq2 = getSubsequence(s, mask2);
                        if (isPalindrome(subseq2)) {
                            maxProduct = Math.max(maxProduct, subseq1.length() * subseq2.length());
                        }
                    }
                }
            }
        }

        return maxProduct;
    }

    private String getSubsequence(String s, int mask) {
        StringBuilder sb = new StringBuilder();
      for (int i = 0; i < s.length(); i++) {
            if ((mask & (1 << i)) != 0) {
                sb.append(s.charAt(i));
            }
        }
        return sb.toString();
    }

    private boolean isPalindrome(String s) {
        int left = 0, right = s.length() - 1;
        while (left < right) {
            if (s.charAt(left) != s.charAt(right)) {
                return false;
            }
            left++;
            right--;
        }
        return true;
    }
}
